// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetClinic.Database;

namespace PetClinic.Database.Migrations
{
    [DbContext(typeof(PetClinicDbContext))]
    [Migration("20190401194304_DbInit")]
    partial class DbInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PetClinic.Common.Models.Owners.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<Guid>("Uuid");

                    b.HasKey("Id");

                    b.HasIndex("Uuid")
                        .IsUnique();

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("PetClinic.Common.Models.Pets.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("OwnerId");

                    b.Property<int>("Type");

                    b.Property<Guid>("Uuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Uuid")
                        .IsUnique();

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("PetClinic.Common.Models.Vets.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("Uuid");

                    b.HasKey("Id");

                    b.HasIndex("Uuid")
                        .IsUnique();

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("PetClinic.Common.Models.Vets.Vet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("Uuid");

                    b.HasKey("Id");

                    b.HasIndex("Uuid")
                        .IsUnique();

                    b.ToTable("Vets");
                });

            modelBuilder.Entity("PetClinic.Common.Models.Vets.VetSpecialty", b =>
                {
                    b.Property<int>("VetId");

                    b.Property<int>("SpecialtyId");

                    b.HasKey("VetId", "SpecialtyId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("VetSpecialty");
                });

            modelBuilder.Entity("PetClinic.Common.Models.Visits.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Notes")
                        .IsUnicode(true);

                    b.Property<int>("PetId");

                    b.Property<Guid>("Uuid");

                    b.Property<int>("VetId");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.HasIndex("Uuid")
                        .IsUnique();

                    b.HasIndex("VetId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("PetClinic.Common.Models.Owners.Owner", b =>
                {
                    b.OwnsOne("PetClinic.Common.Models.Owners.Address", "Address", b1 =>
                        {
                            b1.Property<int>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100);

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100);

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasMaxLength(100);

                            b1.Property<string>("Line2")
                                .HasMaxLength(100);

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(6);

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100);

                            b1.HasKey("OwnerId");

                            b1.ToTable("Owners");

                            b1.HasOne("PetClinic.Common.Models.Owners.Owner")
                                .WithOne("Address")
                                .HasForeignKey("PetClinic.Common.Models.Owners.Address", "OwnerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("PetClinic.Common.Models.Pets.Pet", b =>
                {
                    b.HasOne("PetClinic.Common.Models.Owners.Owner", "Owner")
                        .WithMany("Pets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PetClinic.Common.Models.Vets.VetSpecialty", b =>
                {
                    b.HasOne("PetClinic.Common.Models.Vets.Specialty", "Specialty")
                        .WithMany("VetSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PetClinic.Common.Models.Vets.Vet", "Vet")
                        .WithMany("Specialties")
                        .HasForeignKey("VetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PetClinic.Common.Models.Visits.Visit", b =>
                {
                    b.HasOne("PetClinic.Common.Models.Pets.Pet", "Pet")
                        .WithMany("Visits")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PetClinic.Common.Models.Vets.Vet", "AssignedVet")
                        .WithMany("Visits")
                        .HasForeignKey("VetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
